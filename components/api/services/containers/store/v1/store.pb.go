// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/moby/moby/components/api/services/containers/store/v1/store.proto

/*
Package store is a generated protocol buffer package.

It is generated from these files:
	github.com/moby/moby/components/api/services/containers/store/v1/store.proto

It has these top-level messages:
	CreateContainerRequest
	CreateContainerResponse
	UpdateContainerRequest
	UpdateContainerResponse
	DeleteContainerRequest
	DeleteContainerResponse
	GetContainerRequest
	GetContainerResponse
	Filters
	ListContainersRequest
	ListContainersResponse
*/
package store

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import moby_core_v1_types "github.com/moby/moby/components/api/types/container"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateContainerRequest struct {
	Spec        *moby_core_v1_types.ContainerSpec `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Annotations *moby_core_v1_types.Annotations   `protobuf:"bytes,2,opt,name=annotations" json:"annotations,omitempty"`
}

func (m *CreateContainerRequest) Reset()                    { *m = CreateContainerRequest{} }
func (m *CreateContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerRequest) ProtoMessage()               {}
func (*CreateContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateContainerRequest) GetSpec() *moby_core_v1_types.ContainerSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *CreateContainerRequest) GetAnnotations() *moby_core_v1_types.Annotations {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type CreateContainerResponse struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
}

func (m *CreateContainerResponse) Reset()                    { *m = CreateContainerResponse{} }
func (m *CreateContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerResponse) ProtoMessage()               {}
func (*CreateContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateContainerResponse) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type UpdateContainerRequest struct {
	ContainerId string                            `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	Version     *moby_core_v1_types.Version       `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Spec        *moby_core_v1_types.ContainerSpec `protobuf:"bytes,3,opt,name=spec" json:"spec,omitempty"`
}

func (m *UpdateContainerRequest) Reset()                    { *m = UpdateContainerRequest{} }
func (m *UpdateContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateContainerRequest) ProtoMessage()               {}
func (*UpdateContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *UpdateContainerRequest) GetVersion() *moby_core_v1_types.Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *UpdateContainerRequest) GetSpec() *moby_core_v1_types.ContainerSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

type UpdateContainerResponse struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
}

func (m *UpdateContainerResponse) Reset()                    { *m = UpdateContainerResponse{} }
func (m *UpdateContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateContainerResponse) ProtoMessage()               {}
func (*UpdateContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *UpdateContainerResponse) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type DeleteContainerRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *DeleteContainerRequest) Reset()                    { *m = DeleteContainerRequest{} }
func (m *DeleteContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteContainerRequest) ProtoMessage()               {}
func (*DeleteContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type DeleteContainerResponse struct {
}

func (m *DeleteContainerResponse) Reset()                    { *m = DeleteContainerResponse{} }
func (m *DeleteContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteContainerResponse) ProtoMessage()               {}
func (*DeleteContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type GetContainerRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *GetContainerRequest) Reset()                    { *m = GetContainerRequest{} }
func (m *GetContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*GetContainerRequest) ProtoMessage()               {}
func (*GetContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetContainerRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type GetContainerResponse struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
}

func (m *GetContainerResponse) Reset()                    { *m = GetContainerResponse{} }
func (m *GetContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*GetContainerResponse) ProtoMessage()               {}
func (*GetContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetContainerResponse) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type Filters struct {
	ContainerIds []string          `protobuf:"bytes,3,rep,name=container_ids,json=containerIds" json:"container_ids,omitempty"`
	Labels       map[string]string `protobuf:"bytes,4,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Names        []string          `protobuf:"bytes,5,rep,name=names" json:"names,omitempty"`
}

func (m *Filters) Reset()                    { *m = Filters{} }
func (m *Filters) String() string            { return proto.CompactTextString(m) }
func (*Filters) ProtoMessage()               {}
func (*Filters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Filters) GetContainerIds() []string {
	if m != nil {
		return m.ContainerIds
	}
	return nil
}

func (m *Filters) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Filters) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type ListContainersRequest struct {
	Filters *Filters `protobuf:"bytes,1,opt,name=filters" json:"filters,omitempty"`
}

func (m *ListContainersRequest) Reset()                    { *m = ListContainersRequest{} }
func (m *ListContainersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContainersRequest) ProtoMessage()               {}
func (*ListContainersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListContainersRequest) GetFilters() *Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

type ListContainersResponse struct {
	Containers []*moby_core_v1_types.Container `protobuf:"bytes,1,rep,name=containers" json:"containers,omitempty"`
}

func (m *ListContainersResponse) Reset()                    { *m = ListContainersResponse{} }
func (m *ListContainersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListContainersResponse) ProtoMessage()               {}
func (*ListContainersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListContainersResponse) GetContainers() []*moby_core_v1_types.Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateContainerRequest)(nil), "moby.core.services.containers.store.v1.CreateContainerRequest")
	proto.RegisterType((*CreateContainerResponse)(nil), "moby.core.services.containers.store.v1.CreateContainerResponse")
	proto.RegisterType((*UpdateContainerRequest)(nil), "moby.core.services.containers.store.v1.UpdateContainerRequest")
	proto.RegisterType((*UpdateContainerResponse)(nil), "moby.core.services.containers.store.v1.UpdateContainerResponse")
	proto.RegisterType((*DeleteContainerRequest)(nil), "moby.core.services.containers.store.v1.DeleteContainerRequest")
	proto.RegisterType((*DeleteContainerResponse)(nil), "moby.core.services.containers.store.v1.DeleteContainerResponse")
	proto.RegisterType((*GetContainerRequest)(nil), "moby.core.services.containers.store.v1.GetContainerRequest")
	proto.RegisterType((*GetContainerResponse)(nil), "moby.core.services.containers.store.v1.GetContainerResponse")
	proto.RegisterType((*Filters)(nil), "moby.core.services.containers.store.v1.Filters")
	proto.RegisterType((*ListContainersRequest)(nil), "moby.core.services.containers.store.v1.ListContainersRequest")
	proto.RegisterType((*ListContainersResponse)(nil), "moby.core.services.containers.store.v1.ListContainersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ContainerStore service

type ContainerStoreClient interface {
	CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	UpdateContainer(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerResponse, error)
	DeleteContainer(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*DeleteContainerResponse, error)
	GetContainer(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerResponse, error)
	ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)
}

type containerStoreClient struct {
	cc *grpc.ClientConn
}

func NewContainerStoreClient(cc *grpc.ClientConn) ContainerStoreClient {
	return &containerStoreClient{cc}
}

func (c *containerStoreClient) CreateContainer(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	out := new(CreateContainerResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.store.v1.ContainerStore/CreateContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerStoreClient) UpdateContainer(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerResponse, error) {
	out := new(UpdateContainerResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.store.v1.ContainerStore/UpdateContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerStoreClient) DeleteContainer(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*DeleteContainerResponse, error) {
	out := new(DeleteContainerResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.store.v1.ContainerStore/DeleteContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerStoreClient) GetContainer(ctx context.Context, in *GetContainerRequest, opts ...grpc.CallOption) (*GetContainerResponse, error) {
	out := new(GetContainerResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.store.v1.ContainerStore/GetContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerStoreClient) ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error) {
	out := new(ListContainersResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.store.v1.ContainerStore/ListContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContainerStore service

type ContainerStoreServer interface {
	CreateContainer(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	UpdateContainer(context.Context, *UpdateContainerRequest) (*UpdateContainerResponse, error)
	DeleteContainer(context.Context, *DeleteContainerRequest) (*DeleteContainerResponse, error)
	GetContainer(context.Context, *GetContainerRequest) (*GetContainerResponse, error)
	ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
}

func RegisterContainerStoreServer(s *grpc.Server, srv ContainerStoreServer) {
	s.RegisterService(&_ContainerStore_serviceDesc, srv)
}

func _ContainerStore_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerStoreServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.store.v1.ContainerStore/CreateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerStoreServer).CreateContainer(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerStore_UpdateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerStoreServer).UpdateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.store.v1.ContainerStore/UpdateContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerStoreServer).UpdateContainer(ctx, req.(*UpdateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerStore_DeleteContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerStoreServer).DeleteContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.store.v1.ContainerStore/DeleteContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerStoreServer).DeleteContainer(ctx, req.(*DeleteContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerStore_GetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerStoreServer).GetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.store.v1.ContainerStore/GetContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerStoreServer).GetContainer(ctx, req.(*GetContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerStore_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerStoreServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.store.v1.ContainerStore/ListContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerStoreServer).ListContainers(ctx, req.(*ListContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContainerStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moby.core.services.containers.store.v1.ContainerStore",
	HandlerType: (*ContainerStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContainer",
			Handler:    _ContainerStore_CreateContainer_Handler,
		},
		{
			MethodName: "UpdateContainer",
			Handler:    _ContainerStore_UpdateContainer_Handler,
		},
		{
			MethodName: "DeleteContainer",
			Handler:    _ContainerStore_DeleteContainer_Handler,
		},
		{
			MethodName: "GetContainer",
			Handler:    _ContainerStore_GetContainer_Handler,
		},
		{
			MethodName: "ListContainers",
			Handler:    _ContainerStore_ListContainers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/moby/moby/components/api/services/containers/store/v1/store.proto",
}

func init() {
	proto.RegisterFile("github.com/moby/moby/components/api/services/containers/store/v1/store.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xc9, 0xda, 0xae, 0xea, 0x69, 0x19, 0xc8, 0x94, 0x2e, 0x04, 0xa1, 0x75, 0x41, 0x42,
	0xbd, 0x4a, 0xd4, 0xa2, 0x49, 0x83, 0xb1, 0xa1, 0xae, 0xfc, 0xd1, 0xa4, 0x5e, 0x79, 0x02, 0x04,
	0x42, 0x42, 0x69, 0x6a, 0x4a, 0x44, 0x6b, 0x87, 0xd8, 0x8d, 0xd4, 0x47, 0xe0, 0x0a, 0x69, 0x6f,
	0xc1, 0x9b, 0xf0, 0x00, 0x5c, 0xf3, 0x06, 0xbc, 0xc3, 0x14, 0x3b, 0x6d, 0xb2, 0x36, 0x9b, 0xb2,
	0x6a, 0x37, 0x95, 0x93, 0x9e, 0xef, 0x9c, 0xdf, 0xf9, 0xec, 0xe3, 0x40, 0x7f, 0xe4, 0x89, 0x6f,
	0xd3, 0x81, 0xe5, 0xb2, 0x89, 0x3d, 0x61, 0x83, 0x99, 0xfa, 0x71, 0xd9, 0xc4, 0x67, 0x94, 0x50,
	0xc1, 0x6d, 0xc7, 0xf7, 0x6c, 0x4e, 0x82, 0xd0, 0x73, 0x09, 0xb7, 0x5d, 0x46, 0x85, 0xe3, 0x51,
	0x12, 0x70, 0x9b, 0x0b, 0x16, 0x10, 0x3b, 0x6c, 0xab, 0x85, 0xe5, 0x07, 0x4c, 0x30, 0xf4, 0x24,
	0x52, 0x5b, 0x6e, 0xf4, 0x62, 0xae, 0xb1, 0x12, 0x8d, 0xa5, 0x42, 0xc3, 0xb6, 0x51, 0x1f, 0xb1,
	0x11, 0x93, 0x12, 0x3b, 0x5a, 0x29, 0xb5, 0xd1, 0xcb, 0xc3, 0x22, 0x66, 0x7e, 0x1a, 0x24, 0x59,
	0xa9, 0x24, 0xe6, 0x99, 0x06, 0x8d, 0x5e, 0x40, 0x1c, 0x41, 0x7a, 0xf3, 0x7f, 0x30, 0xf9, 0x31,
	0x25, 0x5c, 0xa0, 0x3d, 0x28, 0x72, 0x9f, 0xb8, 0xba, 0xd6, 0xd4, 0x5a, 0xd5, 0xce, 0xae, 0x95,
	0xc0, 0x86, 0x6d, 0x4b, 0xe6, 0xb5, 0x16, 0x9a, 0x53, 0x9f, 0xb8, 0x58, 0x86, 0xa3, 0x2e, 0x54,
	0x1d, 0x4a, 0x99, 0x70, 0x84, 0xc7, 0x28, 0xd7, 0x37, 0xa4, 0x7a, 0x27, 0x4b, 0xdd, 0x4d, 0xc2,
	0x70, 0x5a, 0x63, 0x7e, 0x86, 0xed, 0x15, 0x26, 0xee, 0x33, 0xca, 0x09, 0xea, 0x42, 0x65, 0xd1,
	0x42, 0x4c, 0xf6, 0xe8, 0x4a, 0xb2, 0xe3, 0xe2, 0x9f, 0x7f, 0x3b, 0xb7, 0x70, 0xa2, 0x32, 0x7f,
	0x6b, 0xd0, 0x78, 0xe7, 0x0f, 0xb3, 0x5a, 0xde, 0x85, 0xda, 0x22, 0xee, 0x8b, 0x37, 0x94, 0x05,
	0x2a, 0xb8, 0xba, 0x78, 0x77, 0x32, 0x44, 0x7b, 0x50, 0x0e, 0x49, 0xc0, 0x3d, 0x46, 0xe3, 0xd6,
	0x1e, 0x66, 0x95, 0x7f, 0xaf, 0x42, 0xf0, 0x3c, 0x76, 0x61, 0x66, 0xe1, 0x5a, 0x66, 0x46, 0x4e,
	0xac, 0xa0, 0xde, 0x9c, 0x13, 0x07, 0xd0, 0x78, 0x45, 0xc6, 0x64, 0x2d, 0x23, 0xcc, 0x07, 0xb0,
	0xbd, 0x22, 0x56, 0x68, 0xe6, 0x3e, 0xdc, 0x7b, 0x4b, 0xc4, 0x3a, 0x49, 0x3f, 0x42, 0xfd, 0xa2,
	0xf2, 0xe6, 0x9a, 0xfd, 0xab, 0x41, 0xf9, 0x8d, 0x37, 0x16, 0x24, 0xe0, 0xe8, 0x31, 0xdc, 0x4e,
	0x93, 0x70, 0xbd, 0xd0, 0x2c, 0xb4, 0x2a, 0xb8, 0x96, 0x42, 0xe1, 0xe8, 0x14, 0x36, 0xc7, 0xce,
	0x80, 0x8c, 0xb9, 0x5e, 0x6c, 0x16, 0x5a, 0xd5, 0xce, 0x81, 0x95, 0x6f, 0x5c, 0xad, 0xb8, 0x8a,
	0xd5, 0x97, 0xea, 0xd7, 0x54, 0x04, 0x33, 0x1c, 0xa7, 0x42, 0x75, 0x28, 0x51, 0x67, 0x42, 0xb8,
	0x5e, 0x92, 0x15, 0xd5, 0x83, 0xf1, 0x0c, 0xaa, 0xa9, 0x60, 0x74, 0x17, 0x0a, 0xdf, 0xc9, 0x2c,
	0xf6, 0x27, 0x5a, 0x46, 0xb2, 0xd0, 0x19, 0x4f, 0x89, 0x3c, 0x73, 0x15, 0xac, 0x1e, 0x9e, 0x6f,
	0xec, 0x6b, 0xe6, 0x00, 0xee, 0xf7, 0x3d, 0x9e, 0x58, 0xc6, 0xe7, 0x6e, 0x9f, 0x40, 0xf9, 0xab,
	0x02, 0x89, 0x0d, 0xb3, 0xaf, 0xc9, 0x8f, 0xe7, 0x7a, 0xf3, 0x03, 0x34, 0x96, 0x6b, 0xc4, 0xfb,
	0x72, 0x08, 0x90, 0x64, 0xd0, 0x35, 0xe9, 0xd3, 0xd5, 0x1b, 0x83, 0x53, 0x82, 0xce, 0xff, 0x12,
	0x6c, 0x25, 0xc7, 0x3e, 0xaa, 0x8f, 0xce, 0x34, 0xb8, 0xb3, 0x34, 0xfc, 0xe8, 0x28, 0x2f, 0x79,
	0xf6, 0x4d, 0x66, 0xbc, 0x5c, 0x5b, 0x1f, 0xb7, 0x19, 0x41, 0x2d, 0xcd, 0x61, 0x7e, 0xa8, 0xec,
	0xbb, 0x26, 0x3f, 0xd4, 0x65, 0x17, 0x40, 0x04, 0xb5, 0x34, 0x81, 0xf9, 0xa1, 0xb2, 0xe7, 0x3e,
	0x3f, 0xd4, 0x25, 0xa3, 0x8f, 0x7e, 0x6a, 0x50, 0x4b, 0x4f, 0x30, 0xca, 0x3d, 0x35, 0x19, 0x37,
	0x86, 0xf1, 0x62, 0x3d, 0x71, 0xcc, 0xf2, 0x4b, 0x83, 0xad, 0x8b, 0xe7, 0x16, 0x1d, 0xe6, 0x4d,
	0x98, 0x39, 0x53, 0xc6, 0xd1, 0xba, 0x72, 0x45, 0x74, 0x5c, 0xfe, 0x54, 0x92, 0x21, 0x83, 0x4d,
	0xf9, 0xf5, 0x7d, 0x7a, 0x1e, 0x00, 0x00, 0xff, 0xff, 0x41, 0x79, 0x6f, 0xdc, 0x50, 0x08, 0x00,
	0x00,
}
