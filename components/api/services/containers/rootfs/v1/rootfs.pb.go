// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/moby/moby/components/api/services/containers/rootfs/v1/rootfs.proto

/*
Package rootfs is a generated protocol buffer package.

It is generated from these files:
	github.com/moby/moby/components/api/services/containers/rootfs/v1/rootfs.proto

It has these top-level messages:
	ExtractRootfsArchiveRequest
	ExtractRootfsArchiveResponse
	FetchRootfsRequest
	FetchRootfsResponse
	StatRootfsRequest
	StatRootfsResponse
	DiffRootfsRequest
	DiffRootfsResponse
*/
package rootfs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import moby_core_v1_types "github.com/moby/moby/components/api/types/container"
import moby_core_types_v1 "github.com/moby/moby/components/api/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExtractRootfsArchiveRequest struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Target    string                        `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *ExtractRootfsArchiveRequest) Reset()                    { *m = ExtractRootfsArchiveRequest{} }
func (m *ExtractRootfsArchiveRequest) String() string            { return proto.CompactTextString(m) }
func (*ExtractRootfsArchiveRequest) ProtoMessage()               {}
func (*ExtractRootfsArchiveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExtractRootfsArchiveRequest) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *ExtractRootfsArchiveRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type ExtractRootfsArchiveResponse struct {
}

func (m *ExtractRootfsArchiveResponse) Reset()                    { *m = ExtractRootfsArchiveResponse{} }
func (m *ExtractRootfsArchiveResponse) String() string            { return proto.CompactTextString(m) }
func (*ExtractRootfsArchiveResponse) ProtoMessage()               {}
func (*ExtractRootfsArchiveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FetchRootfsRequest struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Target    string                        `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *FetchRootfsRequest) Reset()                    { *m = FetchRootfsRequest{} }
func (m *FetchRootfsRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRootfsRequest) ProtoMessage()               {}
func (*FetchRootfsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FetchRootfsRequest) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *FetchRootfsRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type FetchRootfsResponse struct {
}

func (m *FetchRootfsResponse) Reset()                    { *m = FetchRootfsResponse{} }
func (m *FetchRootfsResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchRootfsResponse) ProtoMessage()               {}
func (*FetchRootfsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type StatRootfsRequest struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Target    string                        `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *StatRootfsRequest) Reset()                    { *m = StatRootfsRequest{} }
func (m *StatRootfsRequest) String() string            { return proto.CompactTextString(m) }
func (*StatRootfsRequest) ProtoMessage()               {}
func (*StatRootfsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StatRootfsRequest) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *StatRootfsRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type StatRootfsResponse struct {
	Info *moby_core_types_v1.FileInfo `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *StatRootfsResponse) Reset()                    { *m = StatRootfsResponse{} }
func (m *StatRootfsResponse) String() string            { return proto.CompactTextString(m) }
func (*StatRootfsResponse) ProtoMessage()               {}
func (*StatRootfsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StatRootfsResponse) GetInfo() *moby_core_types_v1.FileInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type DiffRootfsRequest struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
}

func (m *DiffRootfsRequest) Reset()                    { *m = DiffRootfsRequest{} }
func (m *DiffRootfsRequest) String() string            { return proto.CompactTextString(m) }
func (*DiffRootfsRequest) ProtoMessage()               {}
func (*DiffRootfsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DiffRootfsRequest) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type DiffRootfsResponse struct {
}

func (m *DiffRootfsResponse) Reset()                    { *m = DiffRootfsResponse{} }
func (m *DiffRootfsResponse) String() string            { return proto.CompactTextString(m) }
func (*DiffRootfsResponse) ProtoMessage()               {}
func (*DiffRootfsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*ExtractRootfsArchiveRequest)(nil), "moby.core.services.containers.rootfs.v1.ExtractRootfsArchiveRequest")
	proto.RegisterType((*ExtractRootfsArchiveResponse)(nil), "moby.core.services.containers.rootfs.v1.ExtractRootfsArchiveResponse")
	proto.RegisterType((*FetchRootfsRequest)(nil), "moby.core.services.containers.rootfs.v1.FetchRootfsRequest")
	proto.RegisterType((*FetchRootfsResponse)(nil), "moby.core.services.containers.rootfs.v1.FetchRootfsResponse")
	proto.RegisterType((*StatRootfsRequest)(nil), "moby.core.services.containers.rootfs.v1.StatRootfsRequest")
	proto.RegisterType((*StatRootfsResponse)(nil), "moby.core.services.containers.rootfs.v1.StatRootfsResponse")
	proto.RegisterType((*DiffRootfsRequest)(nil), "moby.core.services.containers.rootfs.v1.DiffRootfsRequest")
	proto.RegisterType((*DiffRootfsResponse)(nil), "moby.core.services.containers.rootfs.v1.DiffRootfsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RootfsService service

type RootfsServiceClient interface {
	ExtractRootfsArchive(ctx context.Context, in *ExtractRootfsArchiveRequest, opts ...grpc.CallOption) (*ExtractRootfsArchiveResponse, error)
	FetchRootfs(ctx context.Context, in *FetchRootfsRequest, opts ...grpc.CallOption) (*FetchRootfsResponse, error)
	StatRootfs(ctx context.Context, in *StatRootfsRequest, opts ...grpc.CallOption) (*StatRootfsResponse, error)
	DiffRootfs(ctx context.Context, in *DiffRootfsRequest, opts ...grpc.CallOption) (*DiffRootfsResponse, error)
}

type rootfsServiceClient struct {
	cc *grpc.ClientConn
}

func NewRootfsServiceClient(cc *grpc.ClientConn) RootfsServiceClient {
	return &rootfsServiceClient{cc}
}

func (c *rootfsServiceClient) ExtractRootfsArchive(ctx context.Context, in *ExtractRootfsArchiveRequest, opts ...grpc.CallOption) (*ExtractRootfsArchiveResponse, error) {
	out := new(ExtractRootfsArchiveResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.rootfs.v1.RootfsService/ExtractRootfsArchive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootfsServiceClient) FetchRootfs(ctx context.Context, in *FetchRootfsRequest, opts ...grpc.CallOption) (*FetchRootfsResponse, error) {
	out := new(FetchRootfsResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.rootfs.v1.RootfsService/FetchRootfs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootfsServiceClient) StatRootfs(ctx context.Context, in *StatRootfsRequest, opts ...grpc.CallOption) (*StatRootfsResponse, error) {
	out := new(StatRootfsResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.rootfs.v1.RootfsService/StatRootfs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rootfsServiceClient) DiffRootfs(ctx context.Context, in *DiffRootfsRequest, opts ...grpc.CallOption) (*DiffRootfsResponse, error) {
	out := new(DiffRootfsResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.rootfs.v1.RootfsService/DiffRootfs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RootfsService service

type RootfsServiceServer interface {
	ExtractRootfsArchive(context.Context, *ExtractRootfsArchiveRequest) (*ExtractRootfsArchiveResponse, error)
	FetchRootfs(context.Context, *FetchRootfsRequest) (*FetchRootfsResponse, error)
	StatRootfs(context.Context, *StatRootfsRequest) (*StatRootfsResponse, error)
	DiffRootfs(context.Context, *DiffRootfsRequest) (*DiffRootfsResponse, error)
}

func RegisterRootfsServiceServer(s *grpc.Server, srv RootfsServiceServer) {
	s.RegisterService(&_RootfsService_serviceDesc, srv)
}

func _RootfsService_ExtractRootfsArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRootfsArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootfsServiceServer).ExtractRootfsArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.rootfs.v1.RootfsService/ExtractRootfsArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootfsServiceServer).ExtractRootfsArchive(ctx, req.(*ExtractRootfsArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootfsService_FetchRootfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRootfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootfsServiceServer).FetchRootfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.rootfs.v1.RootfsService/FetchRootfs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootfsServiceServer).FetchRootfs(ctx, req.(*FetchRootfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootfsService_StatRootfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatRootfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootfsServiceServer).StatRootfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.rootfs.v1.RootfsService/StatRootfs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootfsServiceServer).StatRootfs(ctx, req.(*StatRootfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RootfsService_DiffRootfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffRootfsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RootfsServiceServer).DiffRootfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.rootfs.v1.RootfsService/DiffRootfs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RootfsServiceServer).DiffRootfs(ctx, req.(*DiffRootfsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RootfsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moby.core.services.containers.rootfs.v1.RootfsService",
	HandlerType: (*RootfsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractRootfsArchive",
			Handler:    _RootfsService_ExtractRootfsArchive_Handler,
		},
		{
			MethodName: "FetchRootfs",
			Handler:    _RootfsService_FetchRootfs_Handler,
		},
		{
			MethodName: "StatRootfs",
			Handler:    _RootfsService_StatRootfs_Handler,
		},
		{
			MethodName: "DiffRootfs",
			Handler:    _RootfsService_DiffRootfs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/moby/moby/components/api/services/containers/rootfs/v1/rootfs.proto",
}

func init() {
	proto.RegisterFile("github.com/moby/moby/components/api/services/containers/rootfs/v1/rootfs.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcd, 0x6e, 0xda, 0x40,
	0x14, 0x85, 0x71, 0x85, 0x50, 0xb9, 0xa8, 0x0b, 0xa6, 0xb4, 0x42, 0x2e, 0xad, 0x90, 0x37, 0x65,
	0x35, 0xae, 0x69, 0x56, 0x21, 0x9b, 0x84, 0x1f, 0x29, 0x9b, 0x28, 0x32, 0xbb, 0xec, 0xcc, 0x68,
	0x8c, 0x47, 0x02, 0x8f, 0x33, 0x33, 0x58, 0xe1, 0x09, 0x22, 0xe5, 0x3d, 0xf2, 0x4e, 0x79, 0x9c,
	0x28, 0x1e, 0x83, 0x8d, 0x8c, 0x22, 0x43, 0x7e, 0x36, 0xd6, 0xd8, 0xbe, 0xe7, 0x7c, 0xc7, 0xba,
	0x47, 0x86, 0xab, 0x39, 0x53, 0xc1, 0x6a, 0x86, 0x09, 0x5f, 0xda, 0x4b, 0x3e, 0x5b, 0xeb, 0x0b,
	0xe1, 0xcb, 0x88, 0x87, 0x34, 0x54, 0xd2, 0xf6, 0x22, 0x66, 0x4b, 0x2a, 0x62, 0x46, 0xa8, 0xb4,
	0x09, 0x0f, 0x95, 0xc7, 0x42, 0x2a, 0xa4, 0x2d, 0x38, 0x57, 0xbe, 0xb4, 0x63, 0x27, 0x3d, 0xe1,
	0x48, 0x70, 0xc5, 0xd1, 0xdf, 0x17, 0x3d, 0x26, 0x5c, 0x50, 0xbc, 0x51, 0xe1, 0x4c, 0x85, 0xd3,
	0xd9, 0xd8, 0x31, 0x87, 0x65, 0xc0, 0x6a, 0x1d, 0xe5, 0xa9, 0xd9, 0x49, 0xd3, 0xcc, 0x93, 0xf2,
	0x26, 0x3e, 0x5b, 0x50, 0xad, 0xb2, 0x04, 0xfc, 0x1a, 0xdf, 0x29, 0xe1, 0x11, 0xe5, 0x26, 0x71,
	0xce, 0x05, 0x09, 0x58, 0x4c, 0x5d, 0x7a, 0xbb, 0xa2, 0x52, 0xa1, 0x01, 0xd4, 0xb7, 0x9c, 0xb6,
	0xd1, 0x35, 0x7a, 0x8d, 0xfe, 0x6f, 0x9c, 0x7d, 0x56, 0xec, 0xe0, 0xc4, 0x11, 0x0f, 0x37, 0x43,
	0x6e, 0x36, 0x8f, 0x7e, 0x42, 0x4d, 0x79, 0x62, 0x4e, 0x55, 0xfb, 0x4b, 0xd7, 0xe8, 0xd5, 0xdd,
	0xf4, 0xce, 0xfa, 0x03, 0x9d, 0xfd, 0x4c, 0x19, 0xf1, 0x50, 0x52, 0x8b, 0x01, 0x9a, 0x50, 0x45,
	0x02, 0xfd, 0xf6, 0x43, 0xa3, 0xfc, 0x80, 0xef, 0x3b, 0xa8, 0x34, 0x41, 0x00, 0xcd, 0xa9, 0xf2,
	0xd4, 0x27, 0x04, 0x98, 0x00, 0xca, 0x93, 0x34, 0x1f, 0xfd, 0x83, 0x2a, 0x0b, 0x7d, 0x9e, 0x52,
	0x3a, 0x39, 0x8a, 0x46, 0xc4, 0x0e, 0x9e, 0xb0, 0x05, 0xbd, 0x0c, 0x7d, 0xee, 0x26, 0x93, 0xd6,
	0x35, 0x34, 0x47, 0xcc, 0xf7, 0xdf, 0x2f, 0xb1, 0xd5, 0x02, 0x94, 0x77, 0xd4, 0xc9, 0xfa, 0x4f,
	0x55, 0xf8, 0xa6, 0x1f, 0x4d, 0x75, 0xa5, 0xd1, 0xa3, 0x01, 0xad, 0x7d, 0xeb, 0x44, 0x23, 0x5c,
	0xb2, 0xff, 0xf8, 0x95, 0x06, 0x9a, 0xe3, 0x37, 0xba, 0xa4, 0x1b, 0xad, 0xa0, 0x07, 0x03, 0x1a,
	0xb9, 0x5d, 0xa3, 0x41, 0x69, 0xe3, 0x62, 0x19, 0xcd, 0xb3, 0xe3, 0xc4, 0xdb, 0x30, 0xf7, 0x06,
	0x40, 0xb6, 0x77, 0x74, 0x5a, 0xda, 0xae, 0x50, 0x4b, 0x73, 0x70, 0x94, 0x76, 0x27, 0x49, 0xb6,
	0xe7, 0x03, 0x92, 0x14, 0xea, 0x76, 0x40, 0x92, 0x62, 0xb1, 0xac, 0xca, 0xc5, 0xd7, 0x9b, 0x9a,
	0x9e, 0x98, 0xd5, 0x92, 0x7f, 0xd3, 0xff, 0xe7, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x1a, 0xe4,
	0x46, 0x91, 0x05, 0x00, 0x00,
}
