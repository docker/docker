// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/moby/moby/components/api/services/containers/runtime/v1/runtime.proto

/*
Package runtime is a generated protocol buffer package.

It is generated from these files:
	github.com/moby/moby/components/api/services/containers/runtime/v1/runtime.proto

It has these top-level messages:
	StartContainerRequest
	StartContainerResponse
	KillContainerRequest
	KillContainerResponse
	PauseContainerRequest
	PauseContainerResponse
	ResumeContainerRequest
	ResumeContainerResponse
*/
package runtime

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import moby_core_v1_types "github.com/moby/moby/components/api/types/container"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StartContainerRequest struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
}

func (m *StartContainerRequest) Reset()                    { *m = StartContainerRequest{} }
func (m *StartContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*StartContainerRequest) ProtoMessage()               {}
func (*StartContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StartContainerRequest) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type StartContainerResponse struct {
	Pid int32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
}

func (m *StartContainerResponse) Reset()                    { *m = StartContainerResponse{} }
func (m *StartContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*StartContainerResponse) ProtoMessage()               {}
func (*StartContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StartContainerResponse) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type KillContainerRequest struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
	Timeout   *google_protobuf3.Duration    `protobuf:"bytes,2,opt,name=timeout" json:"timeout,omitempty"`
	Signal    uint32                        `protobuf:"varint,3,opt,name=signal" json:"signal,omitempty"`
}

func (m *KillContainerRequest) Reset()                    { *m = KillContainerRequest{} }
func (m *KillContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*KillContainerRequest) ProtoMessage()               {}
func (*KillContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KillContainerRequest) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

func (m *KillContainerRequest) GetTimeout() *google_protobuf3.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *KillContainerRequest) GetSignal() uint32 {
	if m != nil {
		return m.Signal
	}
	return 0
}

type KillContainerResponse struct {
}

func (m *KillContainerResponse) Reset()                    { *m = KillContainerResponse{} }
func (m *KillContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*KillContainerResponse) ProtoMessage()               {}
func (*KillContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PauseContainerRequest struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
}

func (m *PauseContainerRequest) Reset()                    { *m = PauseContainerRequest{} }
func (m *PauseContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*PauseContainerRequest) ProtoMessage()               {}
func (*PauseContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PauseContainerRequest) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type PauseContainerResponse struct {
}

func (m *PauseContainerResponse) Reset()                    { *m = PauseContainerResponse{} }
func (m *PauseContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*PauseContainerResponse) ProtoMessage()               {}
func (*PauseContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ResumeContainerRequest struct {
	Container *moby_core_v1_types.Container `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
}

func (m *ResumeContainerRequest) Reset()                    { *m = ResumeContainerRequest{} }
func (m *ResumeContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*ResumeContainerRequest) ProtoMessage()               {}
func (*ResumeContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResumeContainerRequest) GetContainer() *moby_core_v1_types.Container {
	if m != nil {
		return m.Container
	}
	return nil
}

type ResumeContainerResponse struct {
}

func (m *ResumeContainerResponse) Reset()                    { *m = ResumeContainerResponse{} }
func (m *ResumeContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*ResumeContainerResponse) ProtoMessage()               {}
func (*ResumeContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*StartContainerRequest)(nil), "moby.core.services.containers.runtime.v1.StartContainerRequest")
	proto.RegisterType((*StartContainerResponse)(nil), "moby.core.services.containers.runtime.v1.StartContainerResponse")
	proto.RegisterType((*KillContainerRequest)(nil), "moby.core.services.containers.runtime.v1.KillContainerRequest")
	proto.RegisterType((*KillContainerResponse)(nil), "moby.core.services.containers.runtime.v1.KillContainerResponse")
	proto.RegisterType((*PauseContainerRequest)(nil), "moby.core.services.containers.runtime.v1.PauseContainerRequest")
	proto.RegisterType((*PauseContainerResponse)(nil), "moby.core.services.containers.runtime.v1.PauseContainerResponse")
	proto.RegisterType((*ResumeContainerRequest)(nil), "moby.core.services.containers.runtime.v1.ResumeContainerRequest")
	proto.RegisterType((*ResumeContainerResponse)(nil), "moby.core.services.containers.runtime.v1.ResumeContainerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ContainerRuntimeService service

type ContainerRuntimeServiceClient interface {
	StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error)
	KillContainer(ctx context.Context, in *KillContainerRequest, opts ...grpc.CallOption) (*KillContainerResponse, error)
	PauseContainer(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*PauseContainerResponse, error)
	ResumeContainer(ctx context.Context, in *ResumeContainerRequest, opts ...grpc.CallOption) (*ResumeContainerResponse, error)
}

type containerRuntimeServiceClient struct {
	cc *grpc.ClientConn
}

func NewContainerRuntimeServiceClient(cc *grpc.ClientConn) ContainerRuntimeServiceClient {
	return &containerRuntimeServiceClient{cc}
}

func (c *containerRuntimeServiceClient) StartContainer(ctx context.Context, in *StartContainerRequest, opts ...grpc.CallOption) (*StartContainerResponse, error) {
	out := new(StartContainerResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.runtime.v1.ContainerRuntimeService/StartContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRuntimeServiceClient) KillContainer(ctx context.Context, in *KillContainerRequest, opts ...grpc.CallOption) (*KillContainerResponse, error) {
	out := new(KillContainerResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.runtime.v1.ContainerRuntimeService/KillContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRuntimeServiceClient) PauseContainer(ctx context.Context, in *PauseContainerRequest, opts ...grpc.CallOption) (*PauseContainerResponse, error) {
	out := new(PauseContainerResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.runtime.v1.ContainerRuntimeService/PauseContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerRuntimeServiceClient) ResumeContainer(ctx context.Context, in *ResumeContainerRequest, opts ...grpc.CallOption) (*ResumeContainerResponse, error) {
	out := new(ResumeContainerResponse)
	err := grpc.Invoke(ctx, "/moby.core.services.containers.runtime.v1.ContainerRuntimeService/ResumeContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContainerRuntimeService service

type ContainerRuntimeServiceServer interface {
	StartContainer(context.Context, *StartContainerRequest) (*StartContainerResponse, error)
	KillContainer(context.Context, *KillContainerRequest) (*KillContainerResponse, error)
	PauseContainer(context.Context, *PauseContainerRequest) (*PauseContainerResponse, error)
	ResumeContainer(context.Context, *ResumeContainerRequest) (*ResumeContainerResponse, error)
}

func RegisterContainerRuntimeServiceServer(s *grpc.Server, srv ContainerRuntimeServiceServer) {
	s.RegisterService(&_ContainerRuntimeService_serviceDesc, srv)
}

func _ContainerRuntimeService_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServiceServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.runtime.v1.ContainerRuntimeService/StartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServiceServer).StartContainer(ctx, req.(*StartContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRuntimeService_KillContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServiceServer).KillContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.runtime.v1.ContainerRuntimeService/KillContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServiceServer).KillContainer(ctx, req.(*KillContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRuntimeService_PauseContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServiceServer).PauseContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.runtime.v1.ContainerRuntimeService/PauseContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServiceServer).PauseContainer(ctx, req.(*PauseContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerRuntimeService_ResumeContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerRuntimeServiceServer).ResumeContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.core.services.containers.runtime.v1.ContainerRuntimeService/ResumeContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerRuntimeServiceServer).ResumeContainer(ctx, req.(*ResumeContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContainerRuntimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moby.core.services.containers.runtime.v1.ContainerRuntimeService",
	HandlerType: (*ContainerRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartContainer",
			Handler:    _ContainerRuntimeService_StartContainer_Handler,
		},
		{
			MethodName: "KillContainer",
			Handler:    _ContainerRuntimeService_KillContainer_Handler,
		},
		{
			MethodName: "PauseContainer",
			Handler:    _ContainerRuntimeService_PauseContainer_Handler,
		},
		{
			MethodName: "ResumeContainer",
			Handler:    _ContainerRuntimeService_ResumeContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/moby/moby/components/api/services/containers/runtime/v1/runtime.proto",
}

func init() {
	proto.RegisterFile("github.com/moby/moby/components/api/services/containers/runtime/v1/runtime.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 421 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0xae, 0x93, 0x40,
	0x14, 0x7d, 0xf8, 0xf4, 0xbd, 0xbc, 0x6b, 0xaa, 0x66, 0x62, 0x29, 0x25, 0xd1, 0x34, 0xac, 0x1a,
	0x17, 0x33, 0x69, 0xbb, 0x34, 0xb1, 0x6a, 0xdd, 0xb9, 0x69, 0xa8, 0x6e, 0xdc, 0x01, 0x1d, 0x71,
	0x12, 0x98, 0x41, 0x66, 0x86, 0xa4, 0xbf, 0x61, 0x62, 0xe2, 0xd2, 0xdf, 0x74, 0x67, 0x60, 0xa0,
	0x58, 0xc4, 0xa4, 0xad, 0xdd, 0x90, 0x3b, 0x70, 0xcf, 0x39, 0x97, 0x73, 0xcf, 0xc0, 0x3a, 0x66,
	0xea, 0x8b, 0x0e, 0x71, 0x24, 0x52, 0x92, 0x8a, 0x70, 0x67, 0x1e, 0x91, 0x48, 0x33, 0xc1, 0x29,
	0x57, 0x92, 0x04, 0x19, 0x23, 0x92, 0xe6, 0x05, 0x8b, 0xa8, 0x24, 0x91, 0xe0, 0x2a, 0x60, 0x9c,
	0xe6, 0x92, 0xe4, 0x9a, 0x2b, 0x96, 0x52, 0x52, 0xcc, 0x9a, 0x12, 0x67, 0xb9, 0x50, 0x02, 0x4d,
	0x4b, 0x06, 0x1c, 0x89, 0x9c, 0xe2, 0x06, 0x87, 0x5b, 0x1c, 0x6e, 0x9a, 0x8b, 0x99, 0xbb, 0x3a,
	0x46, 0x5b, 0xed, 0xb2, 0x3f, 0x85, 0xdb, 0xca, 0xc8, 0xb9, 0xcf, 0x63, 0x21, 0xe2, 0x84, 0x92,
	0xea, 0x14, 0xea, 0xcf, 0x64, 0xab, 0xf3, 0x40, 0x31, 0xc1, 0xcd, 0x77, 0xef, 0x03, 0x0c, 0x37,
	0x2a, 0xc8, 0xd5, 0xaa, 0xc1, 0xf9, 0xf4, 0xab, 0xa6, 0x52, 0xa1, 0x97, 0x70, 0xb7, 0xe7, 0x72,
	0xac, 0x89, 0x35, 0x7d, 0x38, 0x7f, 0x86, 0xdb, 0xd9, 0x8b, 0x19, 0xae, 0xa4, 0x71, 0x0b, 0x6c,
	0xfb, 0xbd, 0x17, 0x60, 0x77, 0x59, 0x65, 0x26, 0xb8, 0xa4, 0xe8, 0x09, 0x5c, 0x67, 0x6c, 0x5b,
	0x11, 0x3e, 0xf0, 0xcb, 0xd2, 0xfb, 0x69, 0xc1, 0xd3, 0xf7, 0x2c, 0x49, 0x2e, 0x3a, 0x01, 0x5a,
	0xc0, 0x6d, 0xe9, 0xa3, 0xd0, 0xca, 0xb9, 0x57, 0x41, 0xc7, 0xd8, 0x38, 0x81, 0x1b, 0x27, 0xf0,
	0xbb, 0xda, 0x09, 0xbf, 0xe9, 0x44, 0x36, 0xdc, 0x48, 0x16, 0xf3, 0x20, 0x71, 0xae, 0x27, 0xd6,
	0x74, 0xe0, 0xd7, 0x27, 0x6f, 0x04, 0xc3, 0xce, 0x84, 0xe6, 0x6f, 0x4a, 0xf7, 0xd6, 0x81, 0x96,
	0xf4, 0xb2, 0xee, 0x39, 0x60, 0x77, 0x59, 0x6b, 0xbd, 0x8f, 0x60, 0xfb, 0x54, 0xea, 0xf4, 0xc2,
	0x82, 0x63, 0x18, 0xfd, 0x45, 0x6b, 0x14, 0xe7, 0xbf, 0xee, 0xc3, 0xa8, 0x7d, 0x6b, 0xc2, 0xb9,
	0x31, 0xb9, 0x45, 0xdf, 0x2d, 0x78, 0x74, 0xb8, 0x66, 0xb4, 0xc4, 0xc7, 0xc6, 0x1b, 0xf7, 0xc6,
	0xce, 0x7d, 0x7d, 0x3e, 0x41, 0xed, 0xd1, 0x15, 0xfa, 0x66, 0xc1, 0xe0, 0x60, 0x5f, 0xe8, 0xd5,
	0xf1, 0xac, 0x7d, 0x51, 0x74, 0x97, 0x67, 0xe3, 0xf7, 0x43, 0x95, 0x66, 0x1d, 0x6e, 0xf5, 0x14,
	0xb3, 0x7a, 0x53, 0x76, 0x8a, 0x59, 0xff, 0x08, 0xd4, 0x15, 0xfa, 0x61, 0xc1, 0xe3, 0xce, 0xf2,
	0xd1, 0x09, 0xbc, 0xfd, 0x71, 0x74, 0xdf, 0xfc, 0x07, 0x43, 0x33, 0xda, 0xdb, 0xbb, 0x4f, 0xb7,
	0x75, 0x5f, 0x78, 0x53, 0xdd, 0xda, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x60, 0xe3,
	0x70, 0x90, 0x05, 0x00, 0x00,
}
