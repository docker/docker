#!/bin/bash
set -e

# usage: ./generate.sh [versions]
#    ie: ./generate.sh
#        to update all Dockerfiles in this directory
#    or: ./generate.sh debian-jessie
#        to only update debian-jessie/Dockerfile
#    or: ./generate.sh debian-newversion
#        to create a new folder and a Dockerfile within it

cd "$(dirname "$(readlink -f "$BASH_SOURCE")")"

types=( arm gccgo ppc64le s390x )

for type in "${types[@]}"; do
	case "$type" in
		arm)
			from='ioft/armhf-ubuntu:14.04'
			;;
		gccgo)
			from='gcc:5.2'
			;;
		ppc64le)
			from='ppc64le/gcc:5.2'
			;;
		s390x)
			from='s390x/gcc:5.2'
			;;
	esac

	echo "$type -> FROM $from"

	dockerfile="../../../Dockerfile.${type}"

	cat > "$dockerfile" <<-EOF
		#
		# THIS FILE IS AUTOGENERATED; SEE "contrib/builder/dockerfiles/generate.sh"!
		#
		# This file describes the standard way to build Docker, using docker
		# for ${type}.
		#
		# Usage:
		#
		# # Assemble the full dev environment. This is slow the first time.
		# docker build -t docker -f Dockerfile.${type} .
		#



		FROM $from
	EOF

	echo >> "$dockerfile"

	# this list is sorted alphabetically; please keep it that way
	packages=(
		apparmor
		aufs-tools
		btrfs-tools
		build-essential
		curl ca-certificates
		git
		iptables
		jq
		net-tools
		libapparmor-dev
		libcap-dev
		libsqlite3-dev
	)

	echo "RUN apt-get update && apt-get install -y ${packages[*]} --no-install-recommends && rm -rf /var/lib/apt/lists/*" >> "$dockerfile"

	echo >> "$dockerfile"

	# install lvm2 from source
	cat >> "$dockerfile" <<-'EOF'
	# Get lvm2 source for compiling statically
	RUN git clone -b v2_02_103 https://git.fedorahosted.org/git/lvm2.git /usr/local/lvm2
	# see https://git.fedorahosted.org/cgit/lvm2.git/refs/tags for release tags

	# Compile and install lvm2
	RUN cd /usr/local/lvm2 \
		&& ./configure --enable-static_link \
		&& make device-mapper \
		&& make install_device-mapper
	# see https://git.fedorahosted.org/cgit/lvm2.git/tree/INSTALL

	EOF

	# install golang
	echo 'ENV GOPATH /go:/go/src/github.com/docker/docker/vendor' >> "$dockerfile"
	case "$type" in
		gccgo|ppc64le) ;;
		*)
			awk '$1 == "ENV" && $2 == "GO_VERSION" { print; exit }' ../../../Dockerfile >> "$dockerfile"
			echo 'RUN curl -fSL "https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz" | tar xzC /usr/local' >> "$dockerfile"
			echo 'ENV PATH $PATH:/usr/local/go/bin' >> "$dockerfile"
			;;
	esac

	# Download frozen images
	case "$type" in
		arm)
			cat >> "$dockerfile" <<-'EOF'
			ENV IMAGEREPO hypriot
			COPY contrib/download-frozen-image-v1.sh /go/src/github.com/docker/docker/contrib/
			RUN ./contrib/download-frozen-image-v1.sh /docker-frozen-images \
				$IMAGEREPO/busybox@ea0800bb83571c585c5652b53668e76b29c7c0eef719892f9d0a48607984f9e1 \
				$IMAGEREPO/armhf-hello-world@508c59a4f8b23c77bbcf43296c3f580873dc7eecb1f0d680cea3067e221fd4c2 \
				$IMAGEREPO/armhf-unshare@3f1db65f8bbabc743fd739cf7145a56c35b2a0979ae3174e9d79b7fa4b00fca1
usybox:latest \

			EOF
			;;
		ppc64le)
			cat >> "$dockerfile" <<-'EOF'
			ENV IMAGEREPO ppc64le
			COPY contrib/download-frozen-image-v1.sh /go/src/github.com/docker/docker/contrib/
			RUN ./contrib/download-frozen-image-v1.sh /docker-frozen-images \
				$IMAGEREPO/busybox:latest \
				$IMAGEREPO/hello-world:frozen

			EOF
			;;
		s390x)
			cat >> "$dockerfile" <<-'EOF'
			ENV IMAGEREPO s390x
			COPY contrib/download-frozen-image-v1.sh /go/src/github.com/docker/docker/contrib/
			RUN ./contrib/download-frozen-image-v1.sh /docker-frozen-images \
				$IMAGEREPO/busybox:latest \
				$IMAGEREPO/hello-world:frozen

			EOF
			;;
	esac

	awk '$1 == "ENV" && $2 == "DOCKER_BUILDTAGS" { print; exit }' ../../../Dockerfile >> "$dockerfile"

	# install lvm2 from source
	cat >> "$dockerfile" <<-'EOF'
	# Add an unprivileged user to be used for tests which need it
	RUN groupadd -r docker
	RUN useradd --create-home --gid docker unprivilegeduser

	WORKDIR /go/src/github.com/docker/docker
	ENV DOCKER_BUILDTAGS apparmor selinux

	# Wrap all commands in the "docker-in-docker" script to allow nested containers
	ENTRYPOINT ["hack/dind"]

	# Upload docker source
	COPY . /go/src/github.com/docker/docker
	EOF

done
