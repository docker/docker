package stacks // import "github.com/docker/docker/api/types/stacks

import (
	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/filters"
	"github.com/docker/docker/api/types/swarm"
	"github.com/docker/docker/api/volume"
)

// Stack is an object representing a server-side stack.
type Stack struct {
	// ID is the ID of the stack, generated by the engine
	ID string
	swarm.Meta

	// Spec is the StackSpec defining what this stack should look like
	Spec StackSpec `json:",omitempty"`
}

// StackSpec defines the spec for a server-side stack.
type StackSpec struct {
	// StackSpecs include swarm-style annotations. The stack name cannot be
	// changed once it has been created.
	swarm.Annotations

	// Services is a list of all service specs desired for this stack
	Services []swarm.ServiceSpec `json:",omitempty"`

	// Networks is a list of NetworkCreateRequest that define the networks
	// required for this stack. NetworkCreateRequest includes the network name.
	Networks []types.NetworkCreateRequest `json:",omitempty"`

	// Secrets is a list of all Secrets required for this stack
	Secrets []swarm.SecretSpec `json:",omitempty"`

	// Configs is a list of all Configs required for this stack
	Configs []swarm.ConfigSpec `json:",omitempty"`

	// Volumes is a list of VolumeCreateBody rquired for this stack
	Volumes []volume.VolumeCreateBody `json:",omitempty"`
}

// TODO(dperny): the following types should go in ../client.go, but are here
// for ease of early review

type StackCreateOptions struct {
	// EncodedRegistryAuth is the encoded registry authorization credentials
	// used for services in this stack. This is identical to the
	// EncodedRegistryAuth field in ServiceCreateOptions and
	// ServiceUpdateOptions
	//
	// This field follows the format of the X-Registry-Auth header.
	EncodedRegistryAuth string

	// QueryRegistry indicates whether service operations need to contact a
	// registry. This is identical to the QueryRegistry field of
	// ServiceCreateOptions and ServiceUpdateOptions
	QueryRegistry bool
}

// StackCreateResponse contains the information returned to a client on the
// creation of a stack.
type StackCreateResponse struct {
	// ID is the ID of the created stack. The resources defined in the stack
	// are created asynchronously
	ID string

	// TODO(dperny): should we include a "Warnings" field?
}

// StackUpdateOptions contains the options to be used for updating stacks.
type StackUpdateOptions struct {
	// EncodedRegistryAuth is the encoded registry authorization credentials
	// used for services in this stack. This is identical to the
	// EncodedRegistryAuth field in ServiceCreateOptions and
	// ServiceUpdateOptions
	//
	// This field follows the format of the X-Registry-Auth header.
	EncodedRegistryAuth string

	// QueryRegistry indicates whether services operations need to contact a
	// registry. This is identical to the QueryRegistry field of
	// ServiceCreateOptions and ServiceUpdateOptions
	QueryRegistry bool
}

// StackListOptions holds parameters for listing stacks
type StackListOptions struct {
	Filters filters.Args
}

// StackInspectOptions holds parameters for inspecting stacks
type StackInspectOptions struct {
	// NOTE(dperny): deliberately empty, but available if needed
}
