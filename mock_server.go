// Automatically generated by MockGen. DO NOT EDIT!
// Source: server.go

package docker

import (
	io "io"
	utils "github.com/dotcloud/docker/utils"
	registry "github.com/dotcloud/docker/registry"
	auth "github.com/dotcloud/docker/auth"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of Server interface
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *_MockServerRecorder
}

// Recorder for MockServer (not exported)
type _MockServerRecorder struct {
	mock *MockServer
}

func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &_MockServerRecorder{mock}
	return mock
}

func (_m *MockServer) EXPECT() *_MockServerRecorder {
	return _m.recorder
}

func (_m *MockServer) DockerVersion() APIVersion {
	ret := _m.ctrl.Call(_m, "DockerVersion")
	ret0, _ := ret[0].(APIVersion)
	return ret0
}

func (_mr *_MockServerRecorder) DockerVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DockerVersion")
}

func (_m *MockServer) ContainerKill(name string) error {
	ret := _m.ctrl.Call(_m, "ContainerKill", name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ContainerKill(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerKill", arg0)
}

func (_m *MockServer) ContainerExport(name string, out io.Writer) error {
	ret := _m.ctrl.Call(_m, "ContainerExport", name, out)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ContainerExport(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerExport", arg0, arg1)
}

func (_m *MockServer) ImagesSearch(term string) ([]APISearch, error) {
	ret := _m.ctrl.Call(_m, "ImagesSearch", term)
	ret0, _ := ret[0].([]APISearch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ImagesSearch(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImagesSearch", arg0)
}

func (_m *MockServer) ImageInsert(name string, url string, path string, out io.Writer, sf *utils.StreamFormatter) (string, error) {
	ret := _m.ctrl.Call(_m, "ImageInsert", name, url, path, out, sf)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ImageInsert(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImageInsert", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockServer) ImagesViz(out io.Writer) error {
	ret := _m.ctrl.Call(_m, "ImagesViz", out)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ImagesViz(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImagesViz", arg0)
}

func (_m *MockServer) Images(all bool, filter string) ([]APIImages, error) {
	ret := _m.ctrl.Call(_m, "Images", all, filter)
	ret0, _ := ret[0].([]APIImages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) Images(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Images", arg0, arg1)
}

func (_m *MockServer) DockerInfo() *APIInfo {
	ret := _m.ctrl.Call(_m, "DockerInfo")
	ret0, _ := ret[0].(*APIInfo)
	return ret0
}

func (_mr *_MockServerRecorder) DockerInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DockerInfo")
}

func (_m *MockServer) ImageHistory(name string) ([]APIHistory, error) {
	ret := _m.ctrl.Call(_m, "ImageHistory", name)
	ret0, _ := ret[0].([]APIHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ImageHistory(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImageHistory", arg0)
}

func (_m *MockServer) ContainerChanges(name string) ([]Change, error) {
	ret := _m.ctrl.Call(_m, "ContainerChanges", name)
	ret0, _ := ret[0].([]Change)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ContainerChanges(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerChanges", arg0)
}

func (_m *MockServer) Containers(all bool, n int, since string, before string) []APIContainers {
	ret := _m.ctrl.Call(_m, "Containers", all, n, since, before)
	ret0, _ := ret[0].([]APIContainers)
	return ret0
}

func (_mr *_MockServerRecorder) Containers(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Containers", arg0, arg1, arg2, arg3)
}

func (_m *MockServer) ContainerCommit(name string, repo string, tag string, author string, comment string, config *Config) (string, error) {
	ret := _m.ctrl.Call(_m, "ContainerCommit", name, repo, tag, author, comment, config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ContainerCommit(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerCommit", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockServer) ContainerTag(name string, repo string, tag string, force bool) error {
	ret := _m.ctrl.Call(_m, "ContainerTag", name, repo, tag, force)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ContainerTag(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerTag", arg0, arg1, arg2, arg3)
}

func (_m *MockServer) pullImage(r *registry.Registry, out io.Writer, imgId string, endpoint string, token []string, sf *utils.StreamFormatter) error {
	ret := _m.ctrl.Call(_m, "pullImage", r, out, imgId, endpoint, token, sf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) pullImage(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "pullImage", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockServer) pullRepository(r *registry.Registry, out io.Writer, local string, remote string, askedTag string, sf *utils.StreamFormatter) error {
	ret := _m.ctrl.Call(_m, "pullRepository", r, out, local, remote, askedTag, sf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) pullRepository(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "pullRepository", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockServer) ImagePull(name string, tag string, endpoint string, out io.Writer, sf *utils.StreamFormatter, authConfig *auth.AuthConfig) error {
	ret := _m.ctrl.Call(_m, "ImagePull", name, tag, endpoint, out, sf, authConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ImagePull(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImagePull", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockServer) getChecksum(imageId string) (string, error) {
	ret := _m.ctrl.Call(_m, "getChecksum", imageId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) getChecksum(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "getChecksum", arg0)
}

func (_m *MockServer) getImageList(localRepo map[string]string) ([]*registry.ImgData, error) {
	ret := _m.ctrl.Call(_m, "getImageList", localRepo)
	ret0, _ := ret[0].([]*registry.ImgData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) getImageList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "getImageList", arg0)
}

func (_m *MockServer) pushRepository(r *registry.Registry, out io.Writer, name string, localRepo map[string]string, sf *utils.StreamFormatter) error {
	ret := _m.ctrl.Call(_m, "pushRepository", r, out, name, localRepo, sf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) pushRepository(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "pushRepository", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockServer) pushImage(r *registry.Registry, out io.Writer, remote string, imgId string, ep string, token []string, sf *utils.StreamFormatter) error {
	ret := _m.ctrl.Call(_m, "pushImage", r, out, remote, imgId, ep, token, sf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) pushImage(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "pushImage", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockServer) ImagePush(name string, endpoint string, out io.Writer, sf *utils.StreamFormatter, authConfig *auth.AuthConfig) error {
	ret := _m.ctrl.Call(_m, "ImagePush", name, endpoint, out, sf, authConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ImagePush(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImagePush", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockServer) ImageImport(src string, repo string, tag string, in io.Reader, out io.Writer, sf *utils.StreamFormatter) error {
	ret := _m.ctrl.Call(_m, "ImageImport", src, repo, tag, in, out, sf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ImageImport(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImageImport", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockServer) ContainerCreate(config *Config) (string, error) {
	ret := _m.ctrl.Call(_m, "ContainerCreate", config)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ContainerCreate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerCreate", arg0)
}

func (_m *MockServer) ContainerRestart(name string, t int) error {
	ret := _m.ctrl.Call(_m, "ContainerRestart", name, t)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ContainerRestart(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerRestart", arg0, arg1)
}

func (_m *MockServer) ContainerDestroy(name string, removeVolume bool) error {
	ret := _m.ctrl.Call(_m, "ContainerDestroy", name, removeVolume)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ContainerDestroy(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerDestroy", arg0, arg1)
}

func (_m *MockServer) deleteImageAndChildren(id string, imgs *[]APIRmi) error {
	ret := _m.ctrl.Call(_m, "deleteImageAndChildren", id, imgs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) deleteImageAndChildren(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "deleteImageAndChildren", arg0, arg1)
}

func (_m *MockServer) deleteImageParents(img *Image, imgs *[]APIRmi) error {
	ret := _m.ctrl.Call(_m, "deleteImageParents", img, imgs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) deleteImageParents(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "deleteImageParents", arg0, arg1)
}

func (_m *MockServer) deleteImage(img *Image, repoName string, tag string) (*[]APIRmi, error) {
	ret := _m.ctrl.Call(_m, "deleteImage", img, repoName, tag)
	ret0, _ := ret[0].(*[]APIRmi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) deleteImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "deleteImage", arg0, arg1, arg2)
}

func (_m *MockServer) ImageDelete(name string, autoPrune bool) (*[]APIRmi, error) {
	ret := _m.ctrl.Call(_m, "ImageDelete", name, autoPrune)
	ret0, _ := ret[0].(*[]APIRmi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ImageDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImageDelete", arg0, arg1)
}

func (_m *MockServer) ImageGetCached(imgId string, config *Config) (*Image, error) {
	ret := _m.ctrl.Call(_m, "ImageGetCached", imgId, config)
	ret0, _ := ret[0].(*Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ImageGetCached(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImageGetCached", arg0, arg1)
}

func (_m *MockServer) ContainerStart(name string) error {
	ret := _m.ctrl.Call(_m, "ContainerStart", name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ContainerStart(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerStart", arg0)
}

func (_m *MockServer) ContainerStop(name string, t int) error {
	ret := _m.ctrl.Call(_m, "ContainerStop", name, t)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ContainerStop(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerStop", arg0, arg1)
}

func (_m *MockServer) ContainerWait(name string) (int, error) {
	ret := _m.ctrl.Call(_m, "ContainerWait", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ContainerWait(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerWait", arg0)
}

func (_m *MockServer) ContainerResize(name string, h int, w int) error {
	ret := _m.ctrl.Call(_m, "ContainerResize", name, h, w)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ContainerResize(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerResize", arg0, arg1, arg2)
}

func (_m *MockServer) ContainerAttach(name string, logs bool, stream bool, stdin bool, stdout bool, stderr bool, in io.ReadCloser, out io.Writer) error {
	ret := _m.ctrl.Call(_m, "ContainerAttach", name, logs, stream, stdin, stdout, stderr, in, out)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServerRecorder) ContainerAttach(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerAttach", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

func (_m *MockServer) ContainerInspect(name string) (*Container, error) {
	ret := _m.ctrl.Call(_m, "ContainerInspect", name)
	ret0, _ := ret[0].(*Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ContainerInspect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ContainerInspect", arg0)
}

func (_m *MockServer) ImageInspect(name string) (*Image, error) {
	ret := _m.ctrl.Call(_m, "ImageInspect", name)
	ret0, _ := ret[0].(*Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServerRecorder) ImageInspect(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ImageInspect", arg0)
}

func (_m *MockServer) GetRuntime() *Runtime {
	ret := _m.ctrl.Call(_m, "GetRuntime")
	ret0, _ := ret[0].(*Runtime)
	return ret0
}

func (_mr *_MockServerRecorder) GetRuntime() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRuntime")
}

func (_m *MockServer) GetEnableCors() bool {
	ret := _m.ctrl.Call(_m, "GetEnableCors")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockServerRecorder) GetEnableCors() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEnableCors")
}
